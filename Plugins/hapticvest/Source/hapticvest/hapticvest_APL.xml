<?xml version="1.0" encoding="utf-8"?>
<!--Unreal Plugin Language. all node see Engine/Source/Programs/UnrealBuildTool/System/UnrealPluginLanguage.cs-->
<!--
* 	<androidManifestUpdates> </androidManifestUpdates>
* 	<proguardAdditions>	</proguardAdditions>
*
* 	<AARImports> </AARImports>
* 	<baseBuildGradleAdditions>  </baseBuildGradleAdditions>
*
*	<buildscriptGradleAdditions>  </buildscriptGradleAdditions>
* 	<buildGradleAdditions>  </buildGradleAdditions>
*
* 	<buildXmlPropertyAdditions> </buildXmlPropertyAdditions>
*
* 	<prebuildCopies> </prebuildCopies>
*
* 	<resourceCopies> </resourceCopies>
*
* 	<gradleCopies> </gradleCopies>
*
* 	<gradleProperties> </gradleProperties>
*
* 	<gradleParameters> </gradleParameters>
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
    <androidManifestUpdates>
        <!--权限请求-->

        <!--可选权限-->
        <addPermission android:name="android.permission.BLUETOOTH"/>
        <addPermission android:name="android.permission.BLUETOOTH_ADMIN"/>
        <addPermission android:name="android.permission.ACCESS_FINE_LOCATION"/>
        <addPermission android:name="android.permission.ACCESS_COARSE_LOCATION"/>

        <addPermission android:name="android.permission.BLUETOOTH_ADVERTISE" />
        <addPermission android:name="android.permission.BLUETOOTH_CONNECT" />
        <addPermission android:name="android.permission.BLUETOOTH_SCAN" />

      <!--<addElements tag="application">
        <uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>
      </addElements>-->
    </androidManifestUpdates>

    <!--复制文件$S(PluginDir)=插件的build.cs所在目录. $S(BuildDir)打包输出的AndroidManifest.xml所在目录-->
    <resourceCopies>
        <copyDir src="$S(PluginDir)/Android/java/src/" dst="$S(BuildDir)/src/"/>
        <copyDir src="$S(PluginDir)/Android/java/libs/" dst="$S(BuildDir)/libs/hap/"/>
        
    </resourceCopies>
    
    <!--添加Import语句到GameActivity-->
    <gameActivityImportAdditions>
        <insert>
          import com.hap.ngcod.HapUtils;
          import com.hap.ngcod.IHapHandler;
          import android.Manifest;
          import androidx.core.app.ActivityCompat;
        </insert>
    </gameActivityImportAdditions>

    <!--添加代码到GameActivity-->
    <gameActivityClassAdditions>
    <insert>

      public native void onDeviceStateChangedN(String address, boolean state);

      public native void CalibrationCompleteResultN(int modules);

      public native void PowerResultN(int deviceMode, int power);

      public native void SetArmorMoveResultN(double frontOrBack, double leftOrRight, double around);

      public native void PushButtonClickN(int buttonId, boolean state);

      public native void PushButtonStickN(int buttonId);

      public native void InfraredEntryN(int buttonId, boolean state);

      public native void InfraredSustainedN(int buttonId);

      public native void SetLegMoveResultN(int pos, double frontOrBack, double leftOrRight, double around);

      public native void onInitSuccessN();

      public native void onInitFailN(int code);

      public native void onScanResultN(String address, String name);

      public native void onConnectionChangeN(String address, int connectCode);

      public native void onConnectFailedN(String address, int errorCode);

      public native void onConnectCancelN(String address);

      public native void onNotifySuccessN(String address);

      public native void onWriteSuccessN(String address);

      public native void onWriteFailedN(String address, int code);

      public ArrayList<![CDATA[ < ]]>String> getUngrantedPermissions(Context context, String[] requiredPermissions)
	      {
		      ArrayList<![CDATA[ < ]]>String> ungrantedPermissions = new ArrayList<![CDATA[ < ]]>>();
		      for (String required : requiredPermissions)
		      {
			      if (!PermissionHelper.checkPermission(required))
			      {
				      ungrantedPermissions.add(required);
			      }
		      }
		      return ungrantedPermissions;
	      }

	      private void initStart() {
	        List<![CDATA[ < ]]>String> ungrantedPermission = this.getUngrantedPermissions(this, new String[]{
      Manifest.permission.ACCESS_COARSE_LOCATION,
      Manifest.permission.ACCESS_FINE_LOCATION
      });
      if (!ungrantedPermission.isEmpty()) {
      requestPermissions();
      } else {
      initBle();
      }
      }

      public void requestPermissions()
      {
      this.runOnUiThread(() -> {
      /*ActivityCompat.requestPermissions(this, new String[]{
      Manifest.permission.ACCESS_COARSE_LOCATION,
      Manifest.permission.ACCESS_FINE_LOCATION
      }, 0x0010);*/
      PermissionHelper.acquirePermissions(new String[]{
      Manifest.permission.ACCESS_COARSE_LOCATION,
      Manifest.permission.ACCESS_FINE_LOCATION
      });
      });
      }

      public void initBle() {
      HapUtils.initBle(this);
      }

      public void SetPrecision(int precision) {
      HapUtils.SetPrecision(precision);
      }

      public void SetCalibration() {
      HapUtils.SetCalibration();
      }

      public void shakeEngine(int motorIndex, int time) {
      HapUtils.shakeEngine(motorIndex, time);
      }

      public void disconnect() {
      HapUtils.disconnect();
      }

      public void connect(String deviceID) {
      HapUtils.connect(deviceID);
      }

      public void stopScan() {
      HapUtils.stopScan();
      }

      private boolean isNeedScan = false;
      public void startScan() {
      if (!HapUtils.bInited) {
      this.isNeedScan = true;
      this.initStart();
      } else {
      HapUtils.startScan();
      }
      }
    </insert>
    </gameActivityClassAdditions>

    <!--添加代码到OnCreate函数的Super后面-->
    <gameActivityOnCreateAdditions> 
    <insert>
      
      
    </insert>
    </gameActivityOnCreateAdditions>
  
  <gameActivityOnStartAdditions>
    <insert>
      HapUtils.initEvent(new IHapHandler() {
      @Override
      public void onDeviceStateChanged(String address, boolean state) {
      onDeviceStateChangedN(address, state);
      }

      @Override
      public void CalibrationCompleteResult(int modules) {
      CalibrationCompleteResultN(modules);
      }

      @Override
      public void PowerResult(int deviceMode, int power) {
      PowerResultN(deviceMode, power);
      }

      @Override
      public void SetArmorMoveResult(double frontOrBack, double leftOrRight, double around) {
      SetArmorMoveResultN(frontOrBack, leftOrRight, around);
      }

      @Override
      public void PushButtonClick(int buttonId, boolean state) {
      PushButtonClickN(buttonId, state);
      }

      @Override
      public void PushButtonStick(int buttonId) {
      PushButtonStickN(buttonId);
      }

      @Override
      public void InfraredEntry(int buttonId, boolean state) {
      InfraredEntryN(buttonId, state);
      }

      @Override
      public void InfraredSustained(int buttonId) {
      InfraredSustainedN(buttonId);
      }

      @Override
      public void SetLegMoveResult(int pos, double frontOrBack, double leftOrRight, double around) {
      SetLegMoveResultN(pos, frontOrBack, leftOrRight, around);
      }

      @Override
      public void onInitSuccess() {
      onInitSuccessN();
      if (GameActivity.this.isNeedScan) {
      HapUtils.startScan();
      }
      }

      @Override
      public void onInitFail(int code) {
      onInitFailN(code);
      }

      @Override
      public void onScanResult(String address, String name) {
      onScanResultN(address, name);
      }

      @Override
      public void onConnectionChange(String address, int connectCode) {
      onConnectionChangeN(address, connectCode);
      }

      @Override
      public void onConnectFailed(String address, int errorCode) {
      onConnectFailedN(address, errorCode);
      }

      @Override
      public void onConnectCancel(String address) {
      onConnectCancelN(address);
      }

      @Override
      public void onNotifySuccess(String address) {
      onNotifySuccessN(address);
      }

      @Override
      public void onWriteSuccess(String address) {
      onWriteSuccessN(address);
      }

      @Override
      public void onWriteFailed(String address, int code) {
      onWriteFailedN(address, code);
      }
      });

      initStart();
    </insert>
    </gameActivityOnStartAdditions>
  <gameActivityOnRequestPermissionsResultAdditions>
    <insert>
      if (PermissionHelper.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION) <![CDATA[ && ]]> PermissionHelper.checkPermission(Manifest.permission.ACCESS_FINE_LOCATION)){
      this.initBle();
      }
      Log.debug("请求权限结果:");
      for (int i=0; i <![CDATA[ < ]]> permissions.length; i++) {
			  Log.debug("请求权限结果:" + permissions[i] + ", " + grantResults[i]);
		  }
    </insert>
  </gameActivityOnRequestPermissionsResultAdditions>
    <!--插入内容到gradle.properties-->
    <gradleProperties>
        <insert>
        </insert>
    </gradleProperties>
    <!--插入内容到baseBuildAdditions.gradle-->
    <baseBuildGradleAdditions>
        <insert>
        <!-- Here goes the gradle code -->
        </insert>
    </baseBuildGradleAdditions>
    <!--插入内容到buildAdditions.gradle-->
    <buildGradleAdditions>
        <insert>
repositories {
    flatDir {
        dirs 'libs','./libs/hap'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'src/main/libs/hap/', include: ['*.jar', '*.aar'])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    <!-- implementation project(path: ':ble_sdk') -->
          testImplementation 'junit:junit:4.+'
          androidTestImplementation 'androidx.test.ext:junit:1.1.5'
          androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
          // 日志打印框架：https://github.com/JakeWharton/timber
          implementation 'com.jakewharton.timber:timber:4.7.1'
          }
        </insert>
    </buildGradleAdditions>
    <proguardAdditions>
        <insert>
-keep class com.hap.ngcod.** { *; }
        </insert>
    </proguardAdditions>
</root>